lua_package_path "/www/web/lua-resty-upload/lib/?.lua;;";

server {
    listen 80;
    server_name upload.example.com;

    client_max_body_size 1028m;

    root /www/web/upload-demo;

	location /upload {
	    default_type text/html;

        content_by_lua '
            local resty_sha1 = require "resty.sha1"
            local str = require "resty.string"
            local upload = require "resty.upload"

            local chunk_size = 65535
            local form = upload:new(chunk_size)
            local sha1 = resty_sha1:new()
            local file

            while true do
                local typ, res, err = form:read()

                if not typ then
                     ngx.say("failed to read: ", err)
                     return
                end

                if typ == "header" then
                    local uploads_dir = "/www/web/upload-demo/lua-resty-upload/uploads/"
                    local file_name = string.match(res[2], ";%s*filename=\"([^\"]+)\"")
                    if file_name then
                        file = io.open(uploads_dir .. file_name, "w+")
                        if not file then
                            ngx.say("failed to open file ", file_name)
                            return
                        end
                    end

                 elseif typ == "body" then
                    if file then
                        file:write(res)
                        sha1:update(res)
                    end

                elseif typ == "part_end" then
                    file:close()
                    file = nil
                    local sha1_sum = sha1:final()
                    sha1:reset()
                    ngx.say(str.to_hex(sha1_sum))

                elseif typ == "eof" then
                    break

                else
                    -- do nothing
                end
            end
        ';
    }
}